//I approached the problem by recognizing that each row is generated by expanding the previous row, 
//where 0 is replaced by 01 and 1 is replaced by 10. Instead of generating the entire row, 
//I focused on counting the number of times we encounter 1s in the binary representation of (k-1). 
//The number of 1s determines the parity of the position, which directly gives the K-th symbol.
//Time: logk
//Space: constant
class Solution {
    public int kthGrammar(int n, int k) {
        int count = Integer.bitCount(k - 1);
        return count % 2 == 0 ? 0 : 1;
    }
}